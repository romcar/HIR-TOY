const openLock = require('./openLock.js');

describe('OpenLock', () => {
  it('Should return the minimal total number of turns required', () => {
    let deadends = ['0201', '0101', '0102', '1212', '2002'];
    let target = '0202';

    expect(openLock(deadends, target)).toBe(6);
  });

  it('Should return the minimal total number of turns required', () => {
    let deadends = ['8888'];
    let target = '0009';

    expect(openLock(deadends, target)).toBe(1);
  });

  it('Should return the minimal total number of turns required', () => {
    let deadends = ["7888", "6788", "8777", "6686", "8768", "7667", "8666", "6686", "8768", "7677", "8686", "7667", "6878", "7876", "7687", "7678", "8786", "7777", "7767", "8688",
      "6768", "6876", "7676", "8868", "7686", "6676", "7776", "8776", "8687", "8767", "8677", "7668", "7777", "6677", "7668", "8676", "7866", "7768", "6778", "8878", "7777", "6866",
      "6686", "6678", "7678", "6866", "7876", "6866", "6678", "7777", "7788", "7878", "8887", "8788", "6667", "8877", "7888", "7777", "7766", "8677", "7766", "7778", "7768", "7778",
      "7788", "7877", "8666", "7878", "8788", "7677", "6776", "7686", "8786", "7878", "6667", "6886", "7866", "6868", "8668", "7888", "6788", "6767", "7868", "6876", "6867", "8668",
      "6876", "8767", "8887", "8888", "7777", "8767", "8878", "6886", "6667", "8768", "6668", "7868", "6677", "8887", "7788", "7867", "7767", "8766", "6886", "7887", "6667", "6668",
      "8876", "8778", "8687", "7868", "8678", "7766", "7668", "7867", "7777", "6686", "7876", "7688", "6666", "7677", "6887", "6888", "8786", "6876", "7686", "8776", "6768", "6676",
      "7786", "6876", "7788", "8868", "8766", "6666", "8768", "8667", "7678", "6868", "6886", "8678", "7667", "7667", "8777", "8686", "7778", "7788", "6667", "7768", "6788", "6777",
      "6687", "7888", "7776", "6888", "6676", "6776", "8776", "7678", "8678", "8868", "8766", "8866", "8778", "6878", "7766", "8788", "6778", "7676", "6777", "7866", "8666", "7778",
      "6668", "8678", "6688", "7878", "8676", "7877", "7778", "8687", "6876", "6686", "8766", "6877", "8887", "6878", "6766", "8868", "8767", "7887", "8667", "6686", "6768", "6866",
      "6867", "6766", "8666", "8668", "7867", "7877", "7886", "7667", "6786", "8868", "8677", "6778", "7676", "6787", "7886", "8686", "7678", "8676", "8877", "7887", "8788", "8767",
      "6667", "8688", "6787", "8868", "7777", "7677", "6866", "7886", "7867", "6886", "6686", "7676", "8788", "7877", "7867", "8766", "7666", "7666", "7777", "7667", "6666", "7787",
      "7886", "6777", "8666", "8768", "8777", "7866", "6868", "7667", "8786", "7668", "7887", "6678", "8888", "8676", "6678", "6777", "8688", "8687", "8887", "7666", "6666", "7768",
      "6877", "7887", "8677", "7678", "7888", "8777", "7778", "7776", "8777", "7776", "8876", "8878", "6867", "7867", "8666", "8877", "8688", "6766", "8787", "8788", "6877", "7677",
      "6766", "7688", "8878", "7777", "7687", "8868", "8777", "8768", "6786", "8666", "6767", "8677", "6666", "6888", "6686", "8677", "7776", "7767", "8787", "6868", "7678", "6666",
      "7676", "8868", "8778", "7887", "7888", "8878", "7767", "7787", "6876", "6766", "8678", "7668", "6686", "8886", "7878", "6666", "6676", "6867", "8878", "6777", "7687", "8876",
      "6686", "7688", "7878", "6767", "8887", "8877", "8677", "8687", "7886", "7788", "8877", "8888", "7666", "8868", "6666", "8768", "6878", "8878", "6667", "6687", "7687", "8868",
      "7768", "6676", "6667", "8667", "8878", "6778", "7686", "6877", "7777", "7887", "6686", "8676", "7867", "7676", "6877", "7767", "8788", "6876", "6677", "8688", "8767", "8876",
      "6666", "6667", "7778", "7787", "6768", "7876", "7887", "7888", "6766", "7768", "7788", "8778", "6678", "8676", "7878", "7666", "7677", "7666", "6687", "6686", "8877", "7687",
      "8876", "7887", "7788", "8777", "6778", "8778", "8877", "6876", "8877", "7668", "7787", "6678", "6676", "7667", "8887", "7767", "6767", "6877", "8878", "7768", "8686", "8778",
      "6788", "7788", "7776", "8786", "7877", "7886", "7776", "6868", "7886", "8786", "8886", "7666", "6778", "6888", "7677", "7687", "6877", "8676", "7677", "8876", "8686", "7666",
      "8667", "7866", "7867", "7788", "8776", "8868", "7778", "7687", "7887", "6768", "8668", "7666", "8768", "6876", "7687", "7777", "6686", "6777", "8686", "7668", "7688", "8777",
      "8788", "8778", "6688", "8678", "6777", "8888", "7667", "6786", "7888", "8868", "8677", "8666", "7766", "8878", "8677", "8677", "6766", "8677", "6788", "7866", "6687", "7868",
      "7868", "7878", "8777", "8887", "7667", "6787", "7766", "6688", "7678", "7866", "6886", "8667", "6676", "6676", "6676", "7777", "6777", "8778"
    ]

    let target = '8867';
    expect(openLock(deadends, target)).toBe(11);
  });

  it('Should return the minimal total number of turns required', () => {

    let deadends = ["7666", "7677", "8787", "6877", "7788", "6767", "7787", "8667", "7866", "6767", "8886", "8686", "8778", "8677", "6688", "6676", "8866", "6787", "7888", "8877", "8788",
      "7666", "6666", "6776", "8686", "8786", "8676", "6887", "8668", "6676", "7777", "6877", "8676", "7768", "6888", "8666", "7876", "8776", "8878", "8687", "8676", "6876", "8686", "6886",
      "8687", "7666", "7776", "6788", "6876", "7866", "8666", "8868", "7888", "7767", "8668", "7668", "7666", "7767", "6767", "7866", "8666", "7667", "7766", "6786", "7766", "8767", "6676",
      "7777", "8687", "8768", "7786", "7868", "6867", "6788", "7786", "6778", "7667", "8866", "8866", "7787", "6777", "6878", "7877", "6876", "6868", "7886", "6876", "8687", "8666", "8787",
      "6787", "8768", "7778", "7667", "6887", "6686", "6776", "8877", "6868", "6666", "8778", "8787", "8777", "6868", "6677", "6877", "8688", "6778", "6878", "8887", "6687", "8666", "7866",
      "6776", "8866", "7778", "6676", "8788", "6867", "8688", "7768", "6866", "8786", "8778", "8676", "7886", "8676", "8688", "6766", "7867", "8786", "6766", "6766", "7778", "6887", "6666",
      "6786", "8676", "7888", "6877", "7876", "7886", "6677", "6888", "6776", "8777", "8778", "7876", "6867", "7876", "7887", "6867", "7777", "6778", "7766", "6888", "7677", "7678", "7778",
      "6677", "8766", "8777", "7866", "7777", "8888", "6868", "8886", "6676", "8786", "7687", "8787", "7868", "8688", "6666", "8687", "8767", "8777", "8777", "6786", "8888", "8688", "8687",
      "7886", "6886", "8676", "8786", "7687", "7667", "7688", "8678", "7787", "7876", "7878", "6666", "6866", "7787", "7866", "6768", "6778", "8787", "8678", "7868", "6786", "8886", "8786",
      "8688", "7776", "8676", "6888", "7767", "8766", "8788", "8676", "8888", "6686", "8667", "6688", "6876", "6667", "7688", "8887", "6768", "6778", "8676", "7867", "6776", "7866", "8686",
      "7668", "7776", "6768", "6767", "8666", "6887", "8887", "8888", "8767", "8687", "6787", "8876", "6667", "8686", "6786", "6777", "7766", "8878", "8676", "8676", "7777", "6677", "7686",
      "7887", "7868", "8666", "8778", "8667", "7787", "7678", "8766", "7686", "8787", "6886", "8778", "7868", "6778", "8687", "8768", "8666", "8688", "6866", "7788", "6777", "7878", "7666",
      "8878", "7667", "8676", "6778", "6777", "7787", "8866", "8777", "7678", "8767", "6666", "6887", "6888", "8666", "6686", "6668", "6687", "8866", "7686", "7678", "8687", "8788", "6767",
      "7877", "6668", "7777", "7878", "8786", "8666", "8866", "7687", "6878", "6878", "7887", "8778", "6867", "7688", "8867", "6778", "8778", "7887", "8787", "8786", "8666", "7786", "8777",
      "6667", "7788", "6886", "6766", "8877", "6867", "7767", "6888", "8886", "6888", "8668", "6867", "6768", "8677", "8677", "7676", "8666", "7688", "6666", "8668", "8886", "8877", "7768",
      "7767", "6876", "7776", "7768", "8677", "8688", "7668", "7778", "7867", "6668", "8666", "8866", "6867", "7777", "6886", "8676", "6776", "7867", "8686", "8878", "7768", "7666", "7788",
      "7888", "7768", "7886", "6688", "7867", "8788", "7688", "6878", "6886", "7676", "7867", "7878", "6778", "6877", "8778", "6686", "6666", "6787", "7766", "7667", "7667", "8778", "7776",
      "6876", "8688", "8666", "7887", "7866", "8866", "7678", "7767", "6777", "6767", "7866", "7667", "6867", "8776", "7777", "6788", "6888", "8876", "8866", "6767", "6886", "6868", "7786",
      "7768", "8667", "7687", "6878", "8867", "8767", "6786", "8787", "7687", "8887", "6787", "8668", "8878", "7876", "6688", "8868", "8787", "7676", "8686", "6667", "6766", "7776", "7767",
      "8876", "6668", "8688", "7868", "7867", "7666", "8768", "8877", "7777", "7768", "8788", "7876", "8766", "6676", "8668", "6688", "8866", "7688", "6768", "8787", "6866", "7666", "7868",
      "6778", "6868", "6667", "7666", "8768", "7867", "8687", "8768", "7667", "6677", "7678", "7876", "7678", "8878", "7667", "6786", "8867", "6766", "6788", "7888", "7677", "7887", "6666",
      "6887", "7886", "7786", "7687", "6677", "6867", "8677", "6676", "6666", "8787", "8676", "8787", "8888", "8678", "6767", "7888", "8887", "7688", "8876"]


    let target = "6678";

    expect(openLock(deadends, target)).toBe(13);
  });

});


/*

I - deadends -- [ strings ]
      - only 4 chars long
      - represent only numbers
    target -- string
      - the code we want to get to
O - number -- represents the minimum number of turns required
C - deadends will be in the range [1, 500]
  - target will never be in the deadend list

E - examples are in test.

Approach:


  define turns = 0;
  define start at '0000'
  if the target is included in deadends
    return -1

  iterate through target's chars
    if the current char of target matches the current char of start
      continue
    else
        turn current char to the next possiblity
        is this sequence a dead end?
          true: go back
          false: add 1 to turns



*/